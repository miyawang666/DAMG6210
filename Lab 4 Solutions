
-- Lab 4 Solutions

-- Part A

CREATE DATABASE Dinggan;
USE Dinggan;

CREATE TABLE dbo.TargetCustomers(
TargetID int IDENTITY NOT NULL PRIMARY KEY,
FirstName varchar(40) NOT NULL,
LastName varchar(40) NOT NULL,
Address varchar(80) NOT NULL,
City varchar(30) NOT NULL,
State varchar(30) NOT NULL,
ZipCode varchar(10) NOT NULL);

CREATE TABLE dbo.MailingLists(
MailingListID int IDENTITY NOT NULL PRIMARY KEY,
MailingList varchar(80) NOT NULL);

CREATE TABLE dbo.TargetMailingLists(
TargetID int NOT NULL REFERENCES dbo.TargetCustomers(TargetID),
MailingListID int NOT NULL REFERENCES dbo.MailingLists(MailingListID)
CONSTRAINT PKTargetMailingLists PRIMARY KEY CLUSTERED 
(TargetID,MailingListID));

-- Part B

-- B-1
/* Using the content of AdventureWorks, write a query to retrieve 
   all unique customers with all salespeople they have dealt with. 
   If a customer has never worked with a salesperson, make the 
   'Salesperson ID' column blank instead of displaying NULL. 
   Sort the returned data by CustomerID in the descending order. 
   The result should have the following format. 
 
   Hint: Use the SalesOrderHeadrer table. 
 
CustomerID SalesPerson ID 
30118  275, 277 
30117  275, 277 
30116  276 
30115  289 
30114  290 
30113  282 
30112  280, 284 
*/

Use AdventureWorks2008R2;
SELECT distinct c.CustomerID,
COALESCE( STUFF((SELECT  distinct ', '+RTRIM(CAST(SalesPersonID as char))  
       FROM Sales.SalesOrderHeader 
       WHERE CustomerID = c.customerid
       FOR XML PATH('')) , 1, 2, '') , '')  AS SalesPersons
FROM Sales.Customer c
left join Sales.SalesOrderHeader oh on c.customerID = oh.CustomerID
order by c.CustomerID desc;


-- B-2
/* Using the content of AdventureWorks, write a query to retrieve the top five  
     products for each year. Use OrderQty of SalesOrderDetail to calculate the total quantity sold. 
     The top five products have the five highest sold quantities.  Also calculate the top five products'  
     sold quantity for a year as a percentage of the total quantity sold for the year.  
    
     Return the data in the following format. 
 
 Year % of Total Sale   Top5Products 
 2005 19.58980418600  709, 712, 715, 770, 760 
 2006 13.70859187700  863, 715, 712, 711, 852 
 2007 12.39464630800  712, 870, 711, 708, 715 
 2008 15.68128704000  870, 712, 711, 708, 707 
*/ 
Use AdventureWorks2008R2
WITH Temp1 AS

   (select year(OrderDate) Year, ProductID, sum(OrderQty) ttl,
    rank() over (partition by year(OrderDate) order by sum(OrderQty) desc) as TopProduct
    from Sales.SalesOrderHeader sh
	join Sales.SalesOrderDetail sd
	on sh.SalesOrderID = sd.SalesOrderID
    group by year(OrderDate), ProductID) ,

Temp2 AS

   (select year(OrderDate) Year, sum(OrderQty) ttl
    from Sales.SalesOrderHeader sh
	join Sales.SalesOrderDetail sd
	on sh.SalesOrderID = sd.SalesOrderID
    group by year(OrderDate))

select t1.Year, cast(sum(t1.ttl) as decimal) / t2.ttl * 100 [% of Total Sale],

STUFF((SELECT  ', '+RTRIM(CAST(ProductID as char))  
       FROM temp1 
       WHERE Year = t1.Year and TopProduct <=5
       FOR XML PATH('')) , 1, 2, '') AS Top5Products

from temp1 t1
join temp2 t2
on t1.Year=t2.Year
where t1.TopProduct <= 5
group by t1.Year, t2.ttl;





-- Part C
 
/* Bill of Materials - Recursive */ 
/* Use Adventureworks */ 
/* The following code retrieves the components required for manufacturing 
   the "Mountain-500 Black, 48" (Product 992). Use it as the starter code 
   for calculating the material cost reduction if the component 815 
   is manufactured internally at the level 1 instead of purchasing it 
   for use at the level 0. Use the list price of a component as 
   the material cost for the component. */ 


WITH Parts(AssemblyID, ComponentID, PerAssemblyQty, EndDate, 
ComponentLevel,ListPrice) AS 
( 
    SELECT b.ProductAssemblyID, b.ComponentID, b.PerAssemblyQty, 
           b.EndDate, 0 AS ComponentLevel , p2.ListPrice
    FROM Production.BillOfMaterials AS b JOIN Production.Product p2
    ON b.ComponentID  = p2.ProductID WHERE b.ProductAssemblyID = 992 AND b.EndDate 
IS NULL 
 
    UNION ALL 
 
    SELECT bom.ProductAssemblyID, bom.ComponentID, p.PerAssemblyQty, 
           bom.EndDate, ComponentLevel + 1, p2.ListPrice  
    FROM Production.BillOfMaterials AS bom  
    INNER JOIN Parts AS p 
    ON bom.ProductAssemblyID = p.ComponentID AND bom.EndDate IS NULL 
    INNER JOIN Production.Product p2 ON p2.ProductID = bom.ComponentID  
) , 
ReducedPrice AS
( SELECT  SUM(p.ListPrice) as ListPricelevel1
FROM Production.BillOfMaterials bom 
JOIN Production.Product p ON bom.ComponentID = p.ProductID WHERE 
bom.ProductAssemblyID  = 815
GROUP BY bom.ProductAssemblyID 
)
SELECT (ListPrice - ListPricelevel1) AS ReducedPrice from Parts,ReducedPrice 
WHERE Parts.AssemblyID = 992 and Parts.ComponentID = 815

